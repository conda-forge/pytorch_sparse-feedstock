{% set name = "torch_sparse" %}
{% set version = "0.6.10" %}
# see github.com/conda-forge/conda-forge.github.io/issues/1059 for naming discussion
{% set torch_proc_type = "cuda" if cuda_compiler_version != "None" else "cpu" %}

package:
  name: py{{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: 2e2c7a3649d04e19b3b3960c1d7fc0e767017c93587de1e0d6eb7fda613a6b82

build:
  number: 3
  skip: true  # [win]
  script:
    - export FORCE_CUDA="1"    # [linux64 and cuda_compiler_version not in (undefined, 'None')]
    - export CC="$GCC"   # [linux64 and cuda_compiler_version not in (undefined, 'None')]
    - {{ PYTHON }} -m pip install . -vv

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}  # [cuda_compiler_version not in (undefined, 'None')]
  host:
    - python
    - pip
    - pytorch
    - pytorch =*={{ torch_proc_type }}*
    - setuptools
    - pytest-runner
    - scipy
  run:
    - python
    # Use the run_export to depend on pytorch
    # - pytorch 
    - pytest
    - pytest-cov
    - scipy
    - pytorch_scatter
  run_constrained:
    # 2022/02/05 hmaarrfk
    # While conda packaging seems to allow us to specify
    # constraints on the same package in different lines
    # the resulting package doesn't have the ability to
    # be specified in multiples lines
    # This makes it tricky to use run_exports
    # we add the GPU constraint in the run_constrained
    # to allow us to have "two" constraints on the
    # running package
    - pytorch =*={{ torch_proc_type }}*

test:
  imports:
    - torch_sparse

about:
  home: https://github.com/rusty1s/pytorch_sparse
  summary: PyTorch Extension Library of Optimized Autograd Sparse Matrix Operations
  license: MIT
  license_file: LICENSE
  dev_url: https://github.com/rusty1s/pytorch_sparse

extra:
  recipe-maintainers:
    - mxr-conda
    - rluria14
    - oblute
    - ndmaxar
    - mikemhenry
